{
  "name": "OpenOCR",
  "tagline": "Open source OCR-as-a-Service using Tesseract and Docker",
  "body": "\r\n[![Build Status](https://drone.io/github.com/tleyden/open-ocr/status.png)](https://drone.io/github.com/tleyden/open-ocr/latest) [![GoDoc](http://godoc.org/github.com/tleyden/open-ocr?status.png)](http://godoc.org/github.com/tleyden/open-ocr) \r\n[![Join the chat at https://gitter.im/tleyden/open-ocr](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tleyden/open-ocr?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n\r\nOpenOCR makes it simple to host your own OCR REST API.\r\n\r\nThe heavy lifting OCR work is handled by [Tesseract OCR](https://code.google.com/p/tesseract-ocr/).\r\n\r\n[Docker](http://www.docker.io) is used to containerize the various components of the service.\r\n\r\n![screenshot](http://tleyden-misc.s3.amazonaws.com/blog_images/openocr-architecture.png)\r\n\r\n# Features\r\n\r\n* Scalable message passing architecture via RabbitMQ.\r\n* Platform independence via Docker containers.\r\n* [Kubernetes support](https://github.com/tleyden/open-ocr/tree/master/kubernetes): workers can run in a Kubernetes Replication Controller\r\n* Supports 31 languages in addition to English \r\n* Ability to use an image pre-processing chain.  An example using [Stroke Width Transform](https://github.com/tleyden/open-ocr/wiki/Stroke-Width-Transform) is provided.\r\n* Pass arguments to Tesseract such as character whitelist and page segment mode.\r\n* [REST API docs](http://docs.openocr.apiary.io/)\r\n* A [Go REST client](http://github.com/tleyden/open-ocr-client) is available.\r\n\r\n\r\n# Launching OpenOCR on a Docker PAAS\r\n\r\nOpenOCR can easily run on any PAAS that supports Docker containers.  Here are the instructions for a few that have already been tested:\r\n\r\n* [Launch on Google Container Engine GKE - Kubernetes](https://github.com/tleyden/open-ocr/wiki/Installation-on-Google-Container-Engine)\r\n* [Launch on AWS with CoreOS](https://github.com/tleyden/open-ocr/wiki/Installation-on-CoreOS-Fleet)\r\n* [Launch on Tutum](https://github.com/tleyden/open-ocr/wiki/Installation-on-Tutum)\r\n* [Launch on Google Compute Engine](https://github.com/tleyden/open-ocr/wiki/Installation-on-Google-Compute-Engine)\r\n\r\nIf your preferred PAAS isn't listed, please open a [Github issue](https://github.com/tleyden/open-ocr/issues) to request instructions.\r\n\r\n# Launching OpenOCR on Ubuntu 14.04\r\n\r\nOpenOCR can be launched on anything that supports Docker, such as Ubuntu 14.04.  \r\n\r\nHere's how to install it from scratch and verify that it's working correctly.\r\n\r\n## Install Docker\r\n\r\nSee [Installing Docker on Ubuntu](https://docs.docker.com/installation/ubuntulinux/) instructions.\r\n\r\n## Find out your host address\r\n\r\n```\r\n$ ifconfig\r\neth0      Link encap:Ethernet  HWaddr 08:00:27:43:40:c7\r\n          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0\r\n          ...\r\n```\r\n\r\nThe ip address `10.0.2.15` will be used as the `RABBITMQ_HOST` env variable below.\r\n\r\n\r\n# Launching OpenOCR with Docker Compose on Linux\r\n\r\n * [Install docker](https://docs.docker.com/installation/)\r\n * [Install docker-compose](https://docs.docker.com/compose/)\r\n * Checkout OpenOCR repository or at least copy all files and subdirectories from OpenOCR `docker-compose` directory\r\n * cd docker-compose directory\r\n * run `docker-compose up` to see the log in console or `docker-compose up -d` to run containers as daemons\r\n \r\nDocker Compose will start four docker instances\r\n\r\n* [RabbitMQ](https://index.docker.io/u/tutum/rabbitmq/)\r\n* [OpenOCR Worker](https://index.docker.io/u/tleyden5iwx/open-ocr/)\r\n* [OpenOCR HTTP API Server](https://index.docker.io/u/tleyden5iwx/open-ocr/)\r\n* [OpenOCR Transform Worker](https://registry.hub.docker.com/u/tleyden5iwx/open-ocr-preprocessor/)\r\n\r\nYou are now ready to decode images → text via your REST API.\r\n\r\n# Launching OpenOCR with Docker Compose on OSX\r\n\r\n * [Install docker](https://docs.docker.com/installation/)\r\n * [Install docker toolbox](https://www.docker.com/products/docker-toolbox)\r\n * Checkout OpenOCR repository \r\n * `cd docker-compose directory`\r\n * `docker-machine start default`\r\n * `docker-machine env` \r\n * Look at the Docker host IP address\r\n * Run  `docker-compose up -d` to run containers as daemons or `docker-compose up` to see the log in console\r\n \r\n\r\n## How to test the REST API after turning on the docker-compose up\r\n\r\nWhere `IP_ADDRESS_OF_DOCKER_HOST` is what you saw when you run `docker-machine env` (e.g. 192.168.99.100)\r\nand where `HTTP_POST` is the port number inside the `.yml` file inside the docker-compose directory presuming it should be the same 9292.\r\n\r\n**Request**\r\n\r\n```\r\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"img_url\":\"http://bit.ly/ocrimage\",\"engine\":\"tesseract\"}' http://IP_ADDRESS_OF_DOCKER_HOST:HTTP_PORT/ocr\r\n```\r\n\r\nAssuming the values are (192.168.99.100 and 9292 respectively)\r\n\r\n```\r\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"img_url\":\"http://bit.ly/ocrimage\",\"engine\":\"tesseract\"}' http://192.168.99.100:9292/ocr\r\n```\r\n\r\n**Response**\r\n\r\nIt will return the decoded text for the [test image](http://bit.ly/ocrimage):\r\n\r\n```\r\n< HTTP/1.1 200 OK\r\n< Date: Tue, 13 May 2014 16:18:50 GMT\r\n< Content-Length: 283\r\n< Content-Type: text/plain; charset=utf-8\r\n<\r\nYou can create local variables for the pipelines within the template by\r\npreﬁxing the variable name with a “$\" sign. Variable names have to be\r\ncomposed of alphanumeric characters and the underscore. In the example\r\nbelow I have used a few variations that work for variable names.\r\n\r\n```\r\n \r\n# Test the REST API \r\n\r\n**Request**\r\n\r\n```\r\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"img_url\":\"http://bit.ly/ocrimage\",\"engine\":\"tesseract\"}' http://10.0.2.15:$HTTP_PORT/ocr\r\n```\r\n\r\n**Response**\r\n\r\nIt will return the decoded text for the [test image](http://bit.ly/ocrimage):\r\n\r\n```\r\n< HTTP/1.1 200 OK\r\n< Date: Tue, 13 May 2014 16:18:50 GMT\r\n< Content-Length: 283\r\n< Content-Type: text/plain; charset=utf-8\r\n<\r\nYou can create local variables for the pipelines within the template by\r\npreﬁxing the variable name with a “$\" sign. Variable names have to be\r\ncomposed of alphanumeric characters and the underscore. In the example\r\nbelow I have used a few variations that work for variable names.\r\n\r\n```\r\n\r\nThe REST API also supports:\r\n\r\n* Uploading the image content via `multipart/related`, rather than passing an image URL.  (example client code provided in the [Go REST client](http://github.com/tleyden/open-ocr-client))\r\n* Tesseract config vars (eg, equivalent of -c arguments when using Tesseract via the command line) and Page Seg Mode \r\n* Ability to use an image pre-processing chain, eg [Stroke Width Transform](https://github.com/tleyden/open-ocr/wiki/Stroke-Width-Transform).\r\n* Non-English languages\r\n\r\nSee the [REST API docs](http://docs.openocr.apiary.io/) and the [Go REST client](http://github.com/tleyden/open-ocr-client) for details.\r\n\r\n\r\n# Uploading local files using curl\r\n\r\nThe supplied `docs/upload-local-file.sh` provides an example of how to upload a local file using curl with `multipart/related` encoding of the json and image data:\r\n* usage: `docs/upload-local-file.sh <urlendpoint> <file> [mimetype]`\r\n* download the example ocr image `wget http://bit.ly/ocrimage`\r\n* example: `docs/upload-local-file.sh http://10.0.2.15:$HTTP_PORT/ocr-file-upload ocrimage` \r\n\r\n\r\n# Community\r\n\r\n* Follow [@OpenOCR](https://twitter.com/openocr) on Twitter\r\n* Checkout the [Github issue tracker](https://github.com/tleyden/open-ocr/issues)\r\n\r\n# License\r\n\r\nOpenOCR is Open Source and available under the Apache 2 License.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}